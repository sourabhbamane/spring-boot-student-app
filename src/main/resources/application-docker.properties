# application-docker.properties
# Place this file in src/main/resources/ directory

# Docker-specific configuration
spring.application.name=student-management-boot

# ===== Server Configuration =====
server.port=${SERVER_PORT:8080}
server.servlet.context-path=${SERVER_SERVLET_CONTEXT_PATH:/}

# ===== Datasource (MS SQL Server) - External RDS =====
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:sqlserver://dev-hitachi-db.cn6koiyu8tn5.ap-south-1.rds.amazonaws.com:1433;databaseName=training-sourabh-v1;encrypt=true;trustServerCertificate=true}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:dev_hitachi_user}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:Ef0oTORcMiX7andtoshK}

# Connection pool settings for container environment
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.leak-detection-threshold=60000

# ===== Hibernate / JPA properties =====
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServerDialect
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.open-in-view=false

# ===== JSP View Resolver =====
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
spring.mvc.static-path-pattern=/resources/**
spring.thymeleaf.enabled=false

# ===== Web Configuration =====
spring.web.resources.static-locations=classpath:/static/,classpath:/public/,/webapp/resources/
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=on_param

# ===== Kafka (Docker internal network) =====
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
spring.kafka.consumer.group-id=${SPRING_KAFKA_CONSUMER_GROUP_ID:studentapp-group}
spring.kafka.consumer.auto-offset-reset=${SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET:earliest}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Kafka retry and timeout settings
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval=1000
spring.kafka.producer.acks=1
spring.kafka.producer.retries=3

# ===== Logging Configuration =====
logging.level.org.hibernate.SQL=WARN
logging.level.org.springframework=INFO
logging.level.com.studentapp=DEBUG
logging.level.org.springframework.security=INFO
logging.level.org.hibernate=WARN
logging.level.org.apache.kafka=INFO
logging.level.org.apache.catalina=INFO
logging.level.org.springframework.boot=INFO
logging.file.name=/app/logs/student-app.log
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# ===== Actuator for health checks =====
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:always}
management.health.kafka.enabled=false
management.health.db.enabled=true
management.endpoint.health.group.readiness.include=db
management.endpoint.health.group.liveness.include=ping

# ===== Security Configuration =====
spring.security.user.name=${SPRING_SECURITY_USER_NAME:admin}
spring.security.user.password=${SPRING_SECURITY_USER_PASSWORD:admin}
spring.security.user.roles=${SPRING_SECURITY_USER_ROLES:ADMIN}

# ===== Main Configuration =====
spring.main.banner-mode=console
spring.main.lazy-initialization=false