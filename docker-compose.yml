version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - student-app-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - student-app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  student-app:
    build:
      context: .
      dockerfile: Dockerfile
    image: student-management-app
    container_name: student-management-app
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      # Database config - either hardcode or set in .env
      SPRING_DATASOURCE_URL: jdbc:sqlserver://dev-hitachi-db.cn6koiyu8tn5.ap-south-1.rds.amazonaws.com:1433;databaseName=training-sourabh-v1;encrypt=true;trustServerCertificate=true
      SPRING_DATASOURCE_USERNAME: dev_hitachi_user
      SPRING_DATASOURCE_PASSWORD: Ef0oTORcMiX7andtoshK

      # Hibernate & SQL Server
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.SQLServerDialect

      # Kafka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: student-app-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest

      # Spring Boot
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8080
      SPRING_MVC_VIEW_PREFIX: /WEB-INF/views/
      SPRING_MVC_VIEW_SUFFIX: .jsp
      SPRING_MAIN_BANNER_MODE: "off"

      # Logging
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_STUDENTAPP: DEBUG
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: INFO

      # JVM options
      JAVA_OPTS: "-Xmx512m -Xms256m -server -XX:+UseG1GC -Djava.awt.headless=true"
    volumes:
      - app-logs:/app/logs
    networks:
      - student-app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - student-app-network
    restart: unless-stopped

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  app-logs:

networks:
  student-app-network:
    driver: bridge